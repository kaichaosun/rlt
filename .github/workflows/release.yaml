name: Release Build
"on":
  release:
    types:
      - published

permissions:
  contents: write
jobs:
  build:
    name: "Release - Linux - ${{ matrix.target }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Compile and release
        id: compile
        uses: rust-build/rust-build.action@v1.4.5
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          UPLOAD_MODE: none
          SRC_DIR: ./cli
          ARCHIVE_TYPES: "${{ matrix.archive }}"
          ARCHIVE_NAME: "${{ github.event.repository.name }}-${{github.ref_name}}-${{ matrix.target }}"
          MINIFY: true
        with:
          RUSTTARGET: "${{ matrix.target }}"
          EXTRA_FILES: README.md LICENSE
    
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            files: ${{ steps.compile.outputs.BUILT_ARCHIVE }}

  build-macos:
    name: "Release - Macos - ${{ matrix.target }}"
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - run: cargo build --release --target "${{ matrix.target }}"
      - name: Archive binary
        run: zip -9r ${{ github.event.repository.name }}-${{github.ref_name}}-${{ matrix.target }}.zip target/${{ matrix.target }}/release/localtunnel
     
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            files: ${{ github.event.repository.name }}-${{github.ref_name}}-${{ matrix.target }}.zip

  build-aarch64:
    name: "Release - Arm - ${{ matrix.target }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-musl
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      
      - name: Install aarch64 OpenSSL
        run: |
          wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1k.tar.gz
          tar zxf OpenSSL_1_1_1k.tar.gz
          cd openssl-OpenSSL_1_1_1k
          ./Configure linux-aarch64 --prefix=/openssl no-shared
          make -j$(nproc)
          make install_sw
                
      - name: Install cross
        run: cargo install cross
      - name: Build with cross
        env:
          OPENSSL_DIR: /openssl
          OPENSSL_INCLUDE_DIR: /openssl/include
          OPENSSL_LIB_DIR: /openssl/lib
          PKG_CONFIG_PATH: /openssl/lib/pkgconfig
          OPENSSL_STATIC: 1
        run: cross build --release --target ${{ matrix.target }}
      - name: Archive binary
        run: |
            tar caf ${{ github.event.repository.name }}-${{github.ref_name}}-${{ matrix.target }}.tar.gz target/${{ matrix.target }}/release/localtunnel
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            files: ${{ github.event.repository.name }}-${{github.ref_name}}-${{ matrix.target }}.tar.gz

  post-linux-build:
    name: Post-Linux Build Steps
    needs: build
    runs-on: ubuntu-latest
    if: ${{ contains(needs.build.result, 'success') }}
    permissions:
      contents: read
      packages: write
    env:
        REGISTRY: ghcr.io
        IMAGE_NAME: "${{ github.repository }}"
        IMAGE_TAG: "${{ github.ref_name }}-${{ github.sha }}"
    steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
           images: |
             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
           tags: |
             type=ref,event=tag

        - name: Login to Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build and push Docker image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            build-args: RLT_VERSION=${{github.ref_name}}
        
        - name: Run Docker image for debugging
          run: |
            docker run --name debug_container -d ${{ steps.meta.outputs.tags }}
            sleep 10
            docker logs debug_container
        
        - name: Capture core dump
          if: failure()
          run: |
            docker cp debug_container:/core ./core
            docker cp debug_container:/app/localtunnel ./localtunnel
        
        - name: Analyze core dump
          if: failure()
          run: |
            sudo apt-get update && sudo apt-get install -y gdb
            gdb ./localtunnel ./core -ex "thread apply all bt" -ex "quit" > backtrace.txt
        
        - name: Upload debug artifacts
          if: failure()
          uses: actions/upload-artifact@v3
          with:
            name: debug-artifacts
            path: |
              ./core
              ./localtunnel
              ./backtrace.txt